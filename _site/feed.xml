<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jneth</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 29 May 2019 14:41:38 +0800</pubDate>
    <lastBuildDate>Wed, 29 May 2019 14:41:38 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>iOS工程师简历-江弘</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#联系方式&quot; id=&quot;markdown-toc-联系方式&quot;&gt;联系方式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#个人信息&quot; id=&quot;markdown-toc-个人信息&quot;&gt;个人信息&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#个人能力&quot; id=&quot;markdown-toc-个人能力&quot;&gt;个人能力&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#工作经历&quot; id=&quot;markdown-toc-工作经历&quot;&gt;工作经历&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#项目经验&quot; id=&quot;markdown-toc-项目经验&quot;&gt;项目经验&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#自我评价&quot; id=&quot;markdown-toc-自我评价&quot;&gt;自我评价&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#开源项目&quot; id=&quot;markdown-toc-开源项目&quot;&gt;开源项目&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#技术文章&quot; id=&quot;markdown-toc-技术文章&quot;&gt;技术文章&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#最后&quot; id=&quot;markdown-toc-最后&quot;&gt;最后&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;联系方式&quot;&gt;联系方式&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;手机：18667171797&lt;/li&gt;
  &lt;li&gt;Email：jianghongjohn@163.com&lt;/li&gt;
  &lt;li&gt;籍贯：浙江-温州-苍南&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;个人信息&quot;&gt;个人信息&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;江弘/男/1993&lt;/li&gt;
  &lt;li&gt;本科一本/中国计量大学-信息与计算科学&lt;/li&gt;
  &lt;li&gt;工作年限：3年&lt;/li&gt;
  &lt;li&gt;Github：&lt;a href=&quot;https://github.com/JianghongJohn&quot;&gt;https://github.com/JianghongJohn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;个人博客：&lt;a href=&quot;http://www.jneth.cn&quot;&gt;http://www.jneth.cn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;平台博客：&lt;a href=&quot;https://blog.csdn.net/u010008647&quot;&gt;https://blog.csdn.net/u010008647&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;个人能力&quot;&gt;个人能力&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;精通 Objective-C 语言的特性（Runtime,Block,AutoreleasePool,RunLoop,msgsend），了解主流开源框架的源码结构&lt;/li&gt;
  &lt;li&gt;3年 iOS 客户端开发经验，有独立设计开发 iOS 客户端架构经验（MVC、MVVM等）&lt;/li&gt;
  &lt;li&gt;有一定node.js全栈开发能力，web混合开发，Linux系统部署，数据库设计，API设计，NGINX代理，OSS对象存储，等都在项目中使用过。&lt;/li&gt;
  &lt;li&gt;有跨平台和前端开发的丰富经验，对HTML，CSS，JS比较熟练，Vue也使用过一段时间&lt;/li&gt;
  &lt;li&gt;熟悉Python，编写脚本辅助开发，测试网络爬虫&lt;/li&gt;
  &lt;li&gt;金融贷款平台开发经验丰富，包括马甲包上架经验&lt;/li&gt;
  &lt;li&gt;一本计算机专业，计算机基础良好，理解设计模式（工厂，适配器，策略等），熟悉常用排序算法，查找算法，熟悉栈、队列，树，链表，多线程，熟悉网络通信。&lt;/li&gt;
  &lt;li&gt;能熟练使用调试instrument工具包调试和优化代码，有编写单元测试代码的习惯&lt;/li&gt;
  &lt;li&gt;有一定的组件化和模块化思想，对类之间解耦思路有一定了解&lt;/li&gt;
  &lt;li&gt;有独到见解，常参与产品的设计和改进&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h2 id=&quot;工作经历&quot;&gt;工作经历&lt;/h2&gt;
浩韵控股集团（毕业至今）

&lt;hr /&gt;

&lt;h2 id=&quot;项目经验&quot;&gt;项目经验&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;iOS开发&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;strong&gt;掌上行车(公司重心)&lt;/strong&gt;
一个实现汽车金融贷前贷中贷后全功能的公司核心APP，从中熟悉了汽车互联网金融全和保险的全套流程。项目从零开始使用MVVM模式搭建，有一定的组件化思想，利用Runtime动态性创建页面结构。功能涉及：1.复杂表单数据页面交互。2.自建的基于CA的数据分析图表。3.原始架构基于ionic平台的h5和原生的混合开发。4.音视频通话和录制、即时通讯、OpenGL数据流处理。5.基础的无埋点数据统计。

&lt;strong&gt;叫兽车商&amp;amp;叫兽接单&lt;/strong&gt;
商用APP，一种创新的汽车金融模式，经销商发布任务，业务员独立接单、抢单，不再受传统担保公司的限制。主要是复杂表单展现。

&lt;strong&gt;八匹马租车、嗨会员-会员卡管理系统&lt;/strong&gt;
八匹马租车：基于第三方地图的开发，功能涉及商城、支付，以及地图定位的一些计算
嗨会员：线下商城使用的会员卡系统，普通用户和商家登录两套代码公用APP，功能涉及商城、支付、即时通讯。

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;小程序开发&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;strong&gt;51装修宝&lt;/strong&gt; 用于公司扩展业务“装修贷”，实现订单发起和后续订单处理。

&lt;strong&gt;掌上行车&lt;/strong&gt; 掌上行车App的辅助功能，主要用于客户查看还款信息。

&lt;strong&gt;聚合风控&lt;/strong&gt; 简易小工具，聚合多平台征信查询功能。
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;&lt;em&gt;H5开发&lt;/em&gt;&lt;/strong&gt;
车米力:&lt;a href=&quot;www.chemili.com&quot;&gt;www.chemili.com&lt;/a&gt;
使用Vue开发的汽车资源平台，类似瓜子二手车这种的&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;自我评价&quot;&gt;自我评价&lt;/h2&gt;
三年的开发经验，主要以iOS开发为主，也多次参与其他岗位的开发。工作之外自己学习的编程技能包括：webAPP混合开发、H5开发、Cocos游戏开发、微信小程序开发。详情可以查看我的GitHub和以及博客。主要做前端的一些开发，对服务端也做过一定了解，GitHub上cocos2d开发的斗地主用的服务端就是基于node.js搭建的框架。

&lt;hr /&gt;
&lt;h2 id=&quot;开源项目&quot;&gt;开源项目&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JianghongJohn/cocoscreator-ddz&quot;&gt;斗地主&lt;/a&gt;：完整斗地主项目，全栈开发&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/JianghongJohn/weapp-luck&quot;&gt;小运气&lt;/a&gt;：微信小程序项目（3D抛硬币）node.js,MongoDB，全栈开发&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;技术文章&quot;&gt;技术文章&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/639e9d013a55&quot;&gt;微信小程序项目（3D抛硬币）node.js,MongoDB，全栈开发&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/20dc05b5a437&quot;&gt;马甲包处理和Python自动化文件更改&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后&lt;/h2&gt;

希望您能给我一次面试的机会，不想因为没有过大厂经验，没有211毕业，就被错失了好机会，毕业三年有很认真的在学习各项的能力，不仅仅是计算机编程。感谢！
</description>
        <pubDate>Wed, 29 May 2019 14:23:00 +0800</pubDate>
        <link>http://localhost:4000/2019/05/29/resume/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/05/29/resume/</guid>
        
        <category>iOS</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>微信小程序项目（3D硬币动画），node.js,MongoDB，Koa网络框架,OSS对象存储</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#一项目基本效果&quot; id=&quot;markdown-toc-一项目基本效果&quot;&gt;一、项目基本效果&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二后台框架搭建&quot; id=&quot;markdown-toc-二后台框架搭建&quot;&gt;二、后台框架搭建&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#总结&quot; id=&quot;markdown-toc-总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一项目基本效果&quot;&gt;一、项目基本效果&lt;/h3&gt;
&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/weapp_luck_1.PNG?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/weapp_luck_2.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/weapp_luck_3.PNG?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/weapp_luck_4.PNG?raw=true&quot; alt=&quot;&quot; /&gt;

&lt;h3 id=&quot;二后台框架搭建&quot;&gt;二、后台框架搭建&lt;/h3&gt;
&lt;blockquote&gt;
  项目后端使用node.js,MongoDB数据库的mongoose框架，Koa网络框架,阿里云服务器OSS对象存储。
&lt;/blockquote&gt;

&lt;blockquote&gt;
  koa网络框架,利用了koa框架实现http请求，比较简单可以查看具体代码，或者查询koa相关的使用方法。下边贴出基本的实现。
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const app = new Koa();
const router = require('koa-router')();
const bodyParser = require('koa-bodyparser');
// log request URL:
app.use(async (ctx, next) =&amp;gt; {
    console.log(`Process ${ctx.request.method} ${ctx.request.url}...${ctx.request.body}`);
    await next();
});
// add url-route:
router.get('/hello/:name', async (ctx, next) =&amp;gt; {
    var name = ctx.params.name;
    ctx.response.body = `&amp;lt;h1&amp;gt;Hello, ${name}!&amp;lt;/h1&amp;gt;`;
});
app.use(bodyParser());
app.use(router.routes());
app.listen(3000);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  MongoDB非关系型数据库，利用mongoose框架，搭建项目所需的数据库结构。下边贴出基本的实现。
```
// 引入模块
var mongoose=require(‘mongoose’);
// 连接数据库
mongoose.connect(‘mongodb://localhost:27017/coin’)
// 得到数据库连接句柄
var db=mongoose.connection;
//通过 数据库连接句柄，监听mongoose数据库成功的事件
&lt;/blockquote&gt;

db.once(‘open’ ,() =&amp;gt; {
	console.log(
    ‘连接数据库成功’
  );
})
//定义表数据结构
var coinModel=new mongoose.Schema({
    id:Number,
    wechat_id:String,
    title:String,
    front_title:String,
    back_title:String,
    front_url:String,
    back_url:String,
    isvalid:{type:Boolean,default:true},
})
// 将表的数据结构和表关联起来
var coinModel=mongoose.model(“coin”,coinModel);
//导出数据
module.exports={
    coinModel:coinModel
}
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;### 三、阿里云centos服务端配置
&amp;gt; 首先最基础的是域名购买，域名备案，SSL证书配置，Nginx配置，基本上比较简单，阿里云上都有教程的，下边是我Nginx的配置信息:
proxy_pass:http://localhost:3000;,这条就是设置了反向代理，将域名直接代理到3000端口下，也就是我node服务所指定的端口。443端口就是https默认的访问端口，正确配置下证书的地址就能使用https访问了。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
server {
        listen 80 default backlog=2048;
        listen       443 ssl http2 default_server;
        listen       [::]:443 ssl http2 default_server;
        server_name  &lt;a href=&quot;http://www.xiaoyun7.com;/&quot;&gt;www.xiaoyun7.com;&lt;/a&gt;
        root         /usr/share/nginx/html;
        ssl_certificate “/etc/nginx/chain/1945854&lt;em&gt;&lt;a href=&quot;http://www.xiaoyun7.com.pem/&quot;&gt;www.xiaoyun7.com.pem”;&lt;/a&gt;
        ssl_certificate_key “/etc/nginx/chain/1945854&lt;/em&gt;&lt;a href=&quot;http://www.xiaoyun7.com.key/&quot;&gt;www.xiaoyun7.com.key”;&lt;/a&gt;
        ssl_session_cache shared:SSL:1m;
        ssl_session_timeout  10m;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;
        location /{
        proxy_pass &lt;a href=&quot;http://localhost:3000;&quot;&gt;http://localhost:3000;&lt;/a&gt;
        }
        error_page 404 /404.html;
            location = /40x.html {
        }
        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;MongoDB按照一般教程设置即可，注意设置为开机启动，oss文件服务器需要绑定下我的域名，这样就能通过我的域名上传和下载文件了，这里也就是在阿里云控制台oss的域名管理中，上传下新的证书也就好了。oss比较简单，建一个唯一的Bucket然后会生成自己专属的域名，并支持https，其实不用绑定域名，可直接添加但小程序域名列表里。

### 四、小程序开发要点
&amp;gt;阿里云OSS文件上传，我这里将key和密钥直接写在了小程序代码里(最好通过服务器获取)，参考代码是来自([微信小程序上传文件到阿里云OSS的代码](https://www.jianshu.com/p/34d6dcbdc2e5))。
因为我的图片是需要裁剪的，所以图片选择的时候增加了图片剪裁页面，参考代码为we-cropper.js这个文件，github上也有相应的开源代码，我也是拿别人的来做的。

&amp;gt;简单的3d效果，我是通过图片堆叠来实现的，就是改变坐标轴的Z轴放置图片，比如我厚度为10px，我就会放10张图片叠在一起，每张相隔1个px，然后最后一张做下翻转，这样就有3D的硬币效果了。
然后是抛掷动画：用的是keyframes这个关键帧动画效果，这里遇到的问题就是keyframes只会在页面第一次加载的时候做动画，那么我的做法就是利用js不断切换样式，这样下次点击抛掷的时候就有新的动画效果。

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
#euro {
  width: 150px;
  height: 150px;
  margin-left: -75px;
  margin-top: -75px;
  position: absolute;
  top: 50%;
  left: 50%;
  transform-style: preserve-3d;
  animation: spin 5s linear;
}
@keyframes spin {
  0% {
    top: 50%;
    transform: rotateX(0deg);
  }

10% {
    top: 40%;
    transform: rotateX(1440deg);
  }

20% {
    top: 30%;
    transform: rotateX(2160deg);
  }

30% {
    top: 20%;
    transform: rotateX(2880deg);
  }

40% {
    top: 15%;
    transform: rotateX(2960deg);
  }

50% {
    top: 10%;
    transform: rotateX(3040deg);
  }/* 60% {
        top: 15% ;transform:  rotateX(3120deg);
    }
    70% {
        top: 20% ;transform:  rotateX(3200deg);
    } */

100% {
    top: 50%;
    transform: rotateX(4320deg);
  }
}
```

&lt;h3 id=&quot;总结&quot;&gt;总结&lt;/h3&gt;
这个是我个人从原型设计到UI效果到前端开发到后端开发完全个人完成的一个项目，当然非常的简陋，这里就当是记录下个人的学习记录，希望有看到的大神们多多提意见，帮助小弟进步。github地址&lt;a href=&quot;https://github.com/JianghongJohn/weapp-luck&quot;&gt;https://github.com/JianghongJohn/weapp-luck&lt;/a&gt;
</description>
        <pubDate>Mon, 01 Apr 2019 14:33:00 +0800</pubDate>
        <link>http://localhost:4000/2019/04/01/weapp_luck/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/04/01/weapp_luck/</guid>
        
        <category>node.js</category>
        
        <category>小程序</category>
        
        
        <category>Server</category>
        
      </item>
    
      <item>
        <title>Python一键处理iOS马甲包的文件更改</title>
        <description>
###一、修改文件前缀(JH–&amp;gt;Jneth)
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import os

需要修改的类名前缀 （需替换）
pre_str = 'JH'
// 新的类名前缀 （需替换）
pre_to_str = 'Jneth'
// 搜寻以下文件类型 （根据自己需求替换）
suf_set = ('.h', '.m', '.xib', '.storyboard', '.mm')
// 项目路径   （找到自己的项目路径）
project_path = '/Users/hyjt/Desktop/car/car'
// 项目project.pbxproj文件路径 需要更新配置文件中的类名 （找到自己的项目project.pbxproj路径）
pbxpro_path = '/Users/hyjt/Desktop/car/car.xcodeproj/project.pbxproj'

// 文件重命名函数，返回新的文件名
def file_rename(file_path):
    root_path = os.path.split(file_path)[0]     // 文件目录
    root_name = os.path.split(file_path)[1]     // 文件名包含扩展名
    filename = os.path.splitext(root_name)[0];  // 文件名
    filetype = os.path.splitext(root_name)[1];  // 文件扩展名

    new_path = os.path.join(root_path, filename.replace(pre_str, pre_to_str) + filetype)    // 拼接新路径
    os.renames(file_path, new_path)             // 文件重命名
    return filename.replace(pre_str, pre_to_str)

// 定义一个字典 key=旧类名 value=新类名
needModifyDic = {}

// 遍历文件，符合规则的进行重命名
for (root, dirs, files) in os.walk(project_path):
    for file_name in files:
        if file_name.startswith((pre_str,)) and file_name.endswith(suf_set):
            old_name = os.path.splitext(file_name)[0]
            new_name = file_rename(os.path.join(root, file_name))
            needModifyDic[old_name] = new_name

// 遍历文件，在文件中更换新类名的引用
print(needModifyDic)
for (root, dirs, files) in os.walk(project_path):
    for file_name in files:
        if file_name.endswith(suf_set):
            print('-----fileName-------' + file_name)
            with open(os.path.join(root, file_name), 'r+') as f:
                print('========fileName========' + file_name)
                s0 = f.read()
                f.close()
                for key in needModifyDic:
                    if key in s0:
                        with open(os.path.join(root, file_name), 'r+') as f4:
                            s1 = f4.read().replace(key, needModifyDic[key])
                            print(key + ' ------&amp;gt; ' + needModifyDic[key])
                            f4.seek(0)
                            f4.write(s1)
                            f4.truncate()
                            f4.close()
// 替换配置文件中的类名
for key in needModifyDic:
    with open(pbxpro_path, 'r+') as f:
        s0 = f.read()
        f.close()
        if key in s0:
            with open(pbxpro_path, 'r+') as f2:
                s = f2.read().replace(key, needModifyDic[key])
                f2.seek(0)
                f2.write(s)
                f2.truncate()
                f2.close()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

###二、修改文件后缀（ViewModel–&amp;gt;VM）
```
import os

// 需要修改的类名前缀 （需替换）
end_str = ‘ViewModel’
// 不需要修改的类名后缀 （需替换）
not_end_str = []
// 新的类名后缀 （需替换）
end_to_str = ‘VM’

</description>
        <pubDate>Thu, 27 Dec 2018 20:43:00 +0800</pubDate>
        <link>http://localhost:4000/2018/12/27/python_file_change/</link>
        <guid isPermaLink="true">http://localhost:4000/2018/12/27/python_file_change/</guid>
        
        <category>iOS</category>
        
        <category>python</category>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>iOS中的设计模式常识（适配器、策略、工厂）</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#一适配器模式&quot; id=&quot;markdown-toc-一适配器模式&quot;&gt;一、适配器模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二策略模式&quot; id=&quot;markdown-toc-二策略模式&quot;&gt;二、策略模式&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#三工厂模式&quot; id=&quot;markdown-toc-三工厂模式&quot;&gt;三、工厂模式&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一适配器模式&quot;&gt;一、适配器模式&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;适配器模式简单来说就是让你的代码根据不同的情况发生相对应的变化（适配）
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

🌰：在控制器中关联VIew与Model，当这个视图的Model对象有多个的时候，在View中无法对这些Model进行一一的处理，这时候就需要建立个“适配器”的类

1.建立protocol，protocol中定义接口，用于返回适配后的数据对象

2.建立适配器类，适配器类中实现protocol的接口，可以先类似作为抽象类只返回nil

3.建立适配器子类，子类中实现同适配器类的方法，但这时候根据具体传入的Model对象类型，进行适配，返回对应的处理结果。

4.在View中创建一个加载数据的方法，传入类型为id&lt;适配协议&gt;，在方法中为子视图赋值&lt;/适配协议&gt;

5.在controller中创建需要的Model对象数据，利用堕胎的思想创建适配器，然后通过适配器类通用的方法将数据传递给View

&lt;h3 id=&quot;二策略模式&quot;&gt;二、策略模式&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;定义一系列的算法,把每一个算法封装起来, 并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

🌰：有两个输入框，一个为输入电话号码，一个为输入邮件，需要在textField代理方法中对输入值进行验证，这时候同样利用多态的方式，建立策略类进行验证

1.创建策略抽象类，类中验证方法的正确性，输入为textField，包含一个属性errorMessage，用于提示。

2.在自定义的textField中，导入抽象类并创建一个该对象和一个自定义的验证方法，方法中获取抽象类中的errorMessage中，若为nil则为输入正确。

3.具体的策略实现，在于创建对应的策略子类，实现抽象类中的验证方法返回errorMessage。

4.在controller中创建textField并，初始化子类策略对象给testField中抽象策略类赋值

5.这样实现的时候只需要利用，调用textField的统一验证方法就行了。

&lt;h3 id=&quot;三工厂模式&quot;&gt;三、工厂模式&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

🌰：有两个工厂苹果工厂和谷歌工厂，生产不同的手机和手表，在用户需要切换手机和手表的时候只需要切换工厂就行了，实际的工厂内部生产流程则不去关心。

1.创建一个工厂管理类，定义一个接口用于返回工厂，传入值为工厂枚举值，并根据枚举值去实现这个接口返回对应的工厂。

2.创建一个抽象工厂类，分别定义生产手机和手表的接口

3.创建两个具体工厂分别为苹果和谷歌，并各自实现生产手机和手表的接口，返回基类的手机和手表的子类创建

4.创建抽象手机基类和手表基类，以及两种手机，两种手表子类。

5.在controller中根据工厂管理类中传入工厂枚举创建工厂，然后工厂调用生产方法即可完成对应产品的生产。
</description>
        <pubDate>Sun, 02 Jul 2017 10:41:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/02/iOS_design_model/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/02/iOS_design_model/</guid>
        
        <category>iOS</category>
        
        <category>设计模式</category>
        
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>linux搭建node.js服务，使用pm2启动socket.io服务的过程</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#1安装linux-git工具&quot; id=&quot;markdown-toc-1安装linux-git工具&quot;&gt;1.安装Linux Git工具 &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#2下载nvmnode版本管理工具&quot; id=&quot;markdown-toc-2下载nvmnode版本管理工具&quot;&gt;2.下载nvm(node版本管理工具)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#3使用nvm下载&quot; id=&quot;markdown-toc-3使用nvm下载&quot;&gt;3.使用nvm下载&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#4编写packagejson文件&quot; id=&quot;markdown-toc-4编写packagejson文件&quot;&gt;4.编写package.json文件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#5编写serverjs基础文件&quot; id=&quot;markdown-toc-5编写serverjs基础文件&quot;&gt;5.编写server.js基础文件&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#6将文件上传到你想要的路径&quot; id=&quot;markdown-toc-6将文件上传到你想要的路径&quot;&gt;6.将文件上传到你想要的路径&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#7node自带npm-用npm安装node所需的模块&quot; id=&quot;markdown-toc-7node自带npm-用npm安装node所需的模块&quot;&gt;7.node自带npm ,用npm安装node所需的模块&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#8让node能够在后台一直运行下载pm2管理工具&quot; id=&quot;markdown-toc-8让node能够在后台一直运行下载pm2管理工具&quot;&gt;8.让node能够在后台一直运行，下载pm2管理工具&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#9利用pm2启动serverjs文件&quot; id=&quot;markdown-toc-9利用pm2启动serverjs文件&quot;&gt;9.利用pm2启动server.js文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1安装linux-git工具&quot;&gt;1.安装Linux Git工具 &lt;/h3&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo yum install git&lt;/code&gt;
&lt;h3 id=&quot;2下载nvmnode版本管理工具&quot;&gt;2.下载nvm(node版本管理工具)&lt;/h3&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;curl -o- https://raw.[githubusercontent.com/creationix](http://githubusercontent.com/creationix)/nvm/v0.33.1/install.sh | bash&lt;/code&gt;

&lt;strong&gt;下载完成后可能还是提示没有nvm命令，使用source更新环境变量 source ~/.bashrc或者source ~/.zshrc&lt;/strong&gt;
&lt;h3 id=&quot;3使用nvm下载&quot;&gt;3.使用nvm下载&lt;/h3&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;node  nvm install node&lt;/code&gt;
&lt;h3 id=&quot;4编写packagejson文件&quot;&gt;4.编写package.json文件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;name&quot;: &quot;node_test&quot;,

    &quot;version&quot;: &quot;0.0.1&quot;,

    &quot;description&quot;: &quot;my first socket.io app&quot;,

    &quot;dependencies&quot;: {

        &quot;express&quot;: &quot;^4.15.2&quot;,

        &quot;socket.io&quot;: &quot;^2.0.4&quot;

    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;5编写serverjs基础文件&quot;&gt;5.编写server.js基础文件&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 'use strict'

var app = require('express')();

var http = require('http').Server(app);

var io = require('socket.io')(http);

http.listen(3000, function () {

    console.log('listening on *:3000');

});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;6将文件上传到你想要的路径&quot;&gt;6.将文件上传到你想要的路径&lt;/h3&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;scp /path/filename username@servername:/path&lt;/code&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;scp /ddz-server/server.js  root@192.168.0.101:/root/ddz/ddz_server&lt;/code&gt;

&lt;h3 id=&quot;7node自带npm-用npm安装node所需的模块&quot;&gt;7.node自带npm ,用npm安装node所需的模块&lt;/h3&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;node install&lt;/code&gt;
&lt;h3 id=&quot;8让node能够在后台一直运行下载pm2管理工具&quot;&gt;8.让node能够在后台一直运行，下载pm2管理工具&lt;/h3&gt;
然而这时候只要我们服务端控制台一退出我们的服务就会断了，这时候就需要我们使用pm2这个管理工具了。
&lt;code class=&quot;highlighter-rouge&quot;&gt;npm install pm2 -g&lt;/code&gt;
&lt;h3 id=&quot;9利用pm2启动serverjs文件&quot;&gt;9.利用pm2启动server.js文件&lt;/h3&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;mp2 start server.js&lt;/code&gt;

&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/server_node_pm2.png?raw=true&quot; alt=&quot;&quot; /&gt;

关于pm2的用法具体可以百度谷歌
</description>
        <pubDate>Sun, 02 Jul 2017 10:41:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/02/server_node_pm2/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/02/server_node_pm2/</guid>
        
        <category>linux</category>
        
        <category>node.js</category>
        
        
        <category>Server</category>
        
      </item>
    
      <item>
        <title>组件化思想：cocoapod+coding搭建私人组件仓库</title>
        <description>&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#一首先在coding建立两个私人仓库一个为组建远程索引仓库一个为模板项目仓库&quot; id=&quot;markdown-toc-一首先在coding建立两个私人仓库一个为组建远程索引仓库一个为模板项目仓库&quot;&gt;一、首先在coding建立两个私人仓库（一个为组建远程索引仓库，一个为模板项目仓库）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#二在本地的cocoapod中添加我们自己的远程仓库就是之前建的远程索引库地址&quot; id=&quot;markdown-toc-二在本地的cocoapod中添加我们自己的远程仓库就是之前建的远程索引库地址&quot;&gt;二、在本地的cocoapod中添加我们自己的远程仓库(就是之前建的远程索引库地址)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#三在任意的位置新建一个文件夹利用cocoapod建立repo模板&quot; id=&quot;markdown-toc-三在任意的位置新建一个文件夹利用cocoapod建立repo模板&quot;&gt;三、在任意的位置新建一个文件夹利用cocoapod建立repo模板&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#四修改podspec文件并验证spec文件的有效性&quot; id=&quot;markdown-toc-四修改podspec文件并验证spec文件的有效性&quot;&gt;四、修改podspec文件，并验证spec文件的有效性&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#五然后就可以将这一整个代码提交到远程仓库了这时候并没有关联repo索引&quot; id=&quot;markdown-toc-五然后就可以将这一整个代码提交到远程仓库了这时候并没有关联repo索引&quot;&gt;五、然后就可以将这一整个代码提交到远程仓库了（这时候并没有关联repo索引）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#六最后就是要给我们的远程索引仓库关联我们的本地索引库了这样组件才会存到我们刚开始建的索引仓库中每次更新一次组件都要push最新的上去&quot; id=&quot;markdown-toc-六最后就是要给我们的远程索引仓库关联我们的本地索引库了这样组件才会存到我们刚开始建的索引仓库中每次更新一次组件都要push最新的上去&quot;&gt;六、最后就是要给我们的远程索引仓库关联我们的本地索引库了，这样组件才会存到我们刚开始建的索引仓库中(&lt;em&gt;每次更新一次组件，都要push最新的上去&lt;/em&gt;)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#七这样我们就可以正常使用cocoapod常规方式pod我们自己的组件了&quot; id=&quot;markdown-toc-七这样我们就可以正常使用cocoapod常规方式pod我们自己的组件了&quot;&gt;七、这样我们就可以正常使用cocoapod常规方式pod我们自己的组件了&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#补充&quot; id=&quot;markdown-toc-补充&quot;&gt;补充&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一首先在coding建立两个私人仓库一个为组建远程索引仓库一个为模板项目仓库&quot;&gt;一、首先在coding建立两个私人仓库（一个为组建远程索引仓库，一个为模板项目仓库）&lt;/h3&gt;

&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_1.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_2.png?raw=true&quot; alt=&quot;&quot; /&gt;

&lt;h3 id=&quot;二在本地的cocoapod中添加我们自己的远程仓库就是之前建的远程索引库地址&quot;&gt;二、在本地的cocoapod中添加我们自己的远程仓库(就是之前建的远程索引库地址)&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;~/.cocoapods/repos

pod repo add JnethRepo [https://git.coding.net/jianghongjohn/JnethSpec.git](https://git.coding.net/jianghongjohn/JnethSpec.git)

//这样就生成了你自己的本地仓库

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_3.png?raw=trueg&quot; alt=&quot;&quot; /&gt;

&lt;h3 id=&quot;三在任意的位置新建一个文件夹利用cocoapod建立repo模板&quot;&gt;三、在任意的位置新建一个文件夹利用cocoapod建立repo模板&lt;/h3&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;pod lib create JHKit&lt;/code&gt;

&lt;strong&gt;生成的时候终端会有一些选项，按照提示输入然后回车就行&lt;/strong&gt;

这样就生成了一个模板，接下来就是将你的组件放入Classes文件中，并添加到工程中就可以了

&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_4.png?raw=true&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_5.png?raw=true&quot; alt=&quot;&quot; /&gt;

&lt;h3 id=&quot;四修改podspec文件并验证spec文件的有效性&quot;&gt;四、修改podspec文件，并验证spec文件的有效性&lt;/h3&gt;

&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_6.png?raw=true&quot; alt=&quot;&quot; /&gt;

&lt;strong&gt;期间要做的是验证spec文件的有效性&lt;/strong&gt;

输入命令 pod lib lint

可能出现错误警告

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[!] JHKit did not pass validation, due to 27 warnings (but you can use `--allow-warnings` to ignore them).
You can use the `--no-clean` option to inspect any issue.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

将命令改成pod lib lint –allow-warnings

提示：JnethKit passed validation.

就是符合要求的spec文件了!

&lt;h3 id=&quot;五然后就可以将这一整个代码提交到远程仓库了这时候并没有关联repo索引&quot;&gt;五、然后就可以将这一整个代码提交到远程仓库了（这时候并没有关联repo索引）&lt;/h3&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &quot;first commit&quot;&lt;/code&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add origin [https://git.coding.net/ZKReadStone/LoginModule.git](https://git.coding.net/ZKReadStone/LoginModule.git)&lt;/code&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;git push origin master&lt;/code&gt;

给项目打标记

&lt;code class=&quot;highlighter-rouge&quot;&gt;git tag -m 'New Tag' 0.1.0&lt;/code&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;git push --tags&lt;/code&gt;

这里默认是0.1.0，一定要与之前我们在Xcode中看到的s.version号一致！

&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_7.png?raw=true&quot; alt=&quot;&quot; /&gt;

可以看到readme文件他也帮我们自动生成了

&lt;h3 id=&quot;六最后就是要给我们的远程索引仓库关联我们的本地索引库了这样组件才会存到我们刚开始建的索引仓库中每次更新一次组件都要push最新的上去&quot;&gt;六、最后就是要给我们的远程索引仓库关联我们的本地索引库了，这样组件才会存到我们刚开始建的索引仓库中(&lt;em&gt;每次更新一次组件，都要push最新的上去&lt;/em&gt;)&lt;/h3&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;pod repo push JnethRepo JHKit.podspec&lt;/code&gt;

若出现警告依然可以使用–allow-warnings

&lt;code class=&quot;highlighter-rouge&quot;&gt;pod repo push JnethRepo JnethKit.podspec --allow-warnings&lt;/code&gt;

&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_9.png?raw=true&quot; alt=&quot;&quot; /&gt;

&lt;h3 id=&quot;七这样我们就可以正常使用cocoapod常规方式pod我们自己的组件了&quot;&gt;七、这样我们就可以正常使用cocoapod常规方式pod我们自己的组件了&lt;/h3&gt;

注意在podfile中，我们必须添加source，否则会找不到资源

&lt;code class=&quot;highlighter-rouge&quot;&gt;source '[https://git.coding.net/jianghongjohn/JnethSpec.git](https://git.coding.net/jianghongjohn/JnethSpec.git)’&lt;/code&gt;

&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_10.png?raw=true&quot; alt=&quot;&quot; /&gt;

这样我们的组件库就成功通过cocoapod加入到我们的项目中了，而且所有关联他都自动加好了

&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_11.png?raw=true&quot; alt=&quot;&quot; /&gt;

&lt;img src=&quot;https://github.com/JianghongJohn/jianghongjohn.github.io/blob/master/resource/iOS_pod_element_12.png?raw=true&quot; alt=&quot;&quot; /&gt;

&lt;code class=&quot;highlighter-rouge&quot;&gt;#import &quot;JHKit-umbrella.h&quot;&lt;/code&gt;就可以使用所有的组件了

JHKit-umbrella.h 就是默认生成的我们引用库使用的header文件，可以更改为自己的header

&lt;h3 id=&quot;补充&quot;&gt;补充&lt;/h3&gt;

代码中使用[NSBundle mainBundle]加载资源资源文件会加载失败，因为文件已经不是这个mainBundle中了，用以下方法解决

修改podspec文件中的资源包，这样打包的时候他就会生成一个JnethKit.bundle资源包，Assets里面的文件就会打包到这个里面了

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s.resource_bundles = {
     'JnethKit' =&amp;gt; ['JnethKit/Assets/*']
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

获取文件的方法

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;NSBundle *bundle = [NSBundle bundleForClass:[self class]];
NSString * filePath = [bundle pathForResource:@&quot;address&quot; ofType:@&quot;txt&quot; inDirectory:@&quot;JnethKit.bundle&quot;];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 30 May 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/05/30/iOS_pod_element/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/30/iOS_pod_element/</guid>
        
        <category>iOS</category>
        
        <category>编程思想</category>
        
        
        <category>iOS</category>
        
      </item>
    
  </channel>
</rss>
